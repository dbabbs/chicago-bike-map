cameras:
    camera1:
        type: perspective
sources:
    xyz_osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt
        max_zoom: 16
        url_params:
            access_token: AZL4Ab9z2cBFt9d2PQ2hh0k
    _xyz_space:
        type: GeoJSON
        url: https://xyz.api.here.com/hub/spaces/Pqh7dfFY/tile/web/{z}_{x}_{y}
        url_params:
            access_token: AZL4Ab9z2cBFt9d2PQ2hh0k
    _neighborhoods:
        type: GeoJSON
        url: https://xyz.api.here.com/hub/spaces/5kwzZmtK/tile/web/{z}_{x}_{y}
        url_params:
            access_token: AZL4Ab9z2cBFt9d2PQ2hh0k

global:
    language: en
    language_text_source: |
        function() {
            return (global.language && feature['name:'+global.language]) || feature.name;
        }
    neighborhood_highlight:

styles:
    polygons_transparent:
        base: polygons
        blend: overlay
        blend_order: 1

layers:
    xyz_space:
        data: { source: _xyz_space}
        draw:
            lines:
                order: 10000000
                color: |
                    function() {
                        if (feature.bikeroute === 'ACCESS PATH') {
                           return 'blue';
                        } else if (feature.bikeroute === 'BIKE LANE') {
                           return 'yellow';
                        } else if (feature.bikeroute === 'BUFFERED BIKE LANE') {
                           return 'red';
                        } else if (feature.bikeroute === 'NEIGHBORHOOD GREENWAY') {
                           return 'purple';
                        } else if (feature.bikeroute === 'OFF-STREET TRAIL') {
                           return 'black';
                        } else if (feature.bikeroute === 'PROTECTED BIKE LANE') {
                           return 'pink'
                        } else if (feature.bikeroute === 'SHARED-LANE') {
                           return 'orange';
                        }
                    }
                width: 2px
                interactive: true
                collide: false
    neighborhoods:
        data: { source: _neighborhoods}
        draw:

            polygons:
                order: 99999
                style: polygons_transparent
                # color: [0.404,0.451,1.0,0.1]
                opacity: 0.5
                width: 2px
                interactive: true
                collide: false
    neighborhoods2:
        data: { source: _neighborhoods}
        draw:
            lines:
                order: 9999
                color: '#F16FAA' #rgb(103, 115, 255)
                width: 2px
                # interactive: true
                collide: false
    places:
        data: { source: xyz_osm }
        city-points:
            filter:
                kind: locality
                kind_detail: city
                $zoom: { max: 18 }
            draw:
                 text:
                     text_source: global.language_text_source
                     priority: 10
                     order: 999
                     font:
                         family: -apple-system
                         fill: [0.675, 0.682, 0.690, 1.00]
                         stroke: { color: white, width: 4 }
                         size: [[4, 15px], [8, 18px], [12, 26px], [16, 30px]]
                         buffer: 2px
        neighborhoods:
            filter:
                - { kind: [neighbourhood, macrohood], $zoom: { min: 12.5 } }
                - { kind: microhood, $zoom: { min: 15 } }
            draw:
                 text:
                     text_source: global.language_text_source
                     priority: 10
                     order: 999
                     font:
                         family: -apple-system
                         transform: uppercase
                         fill: [0.722, 0.741, 0.753, 1.00]
                         stroke: { color: [0.984, 0.984, 0.984, 0.97], width: 4}
                         size: [[12, 10px], [15,14px]]
                         buffer: 2px
    earth:
        data: { source: xyz_osm }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#F2F1F3'

    landuse:
        data: { source: xyz_osm }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: [0.769, 0.929, 0.702, 1.00]
        university:
            filter:
                kind: university
            draw:
                polygons:
                    order: function() { return feature.sort_rank; }
                    color: '#FFFAE0'

    water:
        data: { source: xyz_osm }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#AADAFF'

    roads:
        data: { source: xyz_osm }
        non-highway:
            filter:
                not: { kind: [path, rail, ferry, highway]}
                $zoom: { min: 13}
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.000, 1.000, 1.000, 1.00]
                    width: [[13,30], [15, 18],[18,20]]
                    cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.988, 0.875, 0.478, 1.00]
                    width: [[5, 5000], [8, 800], [10, 200], [12, 150],[14,80], [18, 20]]
                    outline:
                        color: [1.000, 1.000, 1.000, 1.00]
                        width: [[14, 8], [18, 3]]
        minor_road:
            filter:
                kind: minor_road
                $zoom: { min: 13}
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.557, 0.573, 0.580, 1.00]
                    width: 10

    buildings:
        data: { source: xyz_osm }
        filter:
            $zoom: { min: 13}
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: [0.922, 0.922, 0.922, 1.00]
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }
